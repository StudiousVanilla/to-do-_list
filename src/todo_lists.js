// class, constructor and methods for the discrete To-Do lists/projects
class TodoList {
    constructor(name,items,priority){
        this.name = name
        this.items = items
        this.priority = priority
    }

    // adds an item to the To-Do list
    addItemToList(listItem){
        this.items.push(listItem)
    }
    // sort To-Do list by property
    orderItemsByProperty(property){
        this.items.sort((a, b) => a[property] > b[property] ? 1 : -1);
    }

    // creates a new array removing the item whose title matches the 'title' parameter
    deleteItemFromList(title){
        return this.items.filter(function(item){
            if(item["title"] !== title){
                return true
            }
        })
    }

    // sets the value of the orignal array to the new array generated from 'deleteItemFromList()' which will have desired items removed
    filterOutItem(title){
        this.items = this.deleteItemFromList(title)
    }

    // logic for editing an item in list, only assigns new values if there is an actual new value
    editList(newName,newPriority){
        if(newName!=null && newName!=""){
            this.name = newName
       } 
        if(newPriority!=null && newPriority!=""){
            this.priority = newPriority
        }
    }

    // used to select relevant item, based off the 'title' parameter
    getItem(title){
        // 'filter()' returns an array with one object inside it 
        let temporaryArray = this.items.filter(item =>{
            return item.title === title
            })
            //'temporaryArray' allows use to just return the object in the array and not the array itself generated by .filter()
            return temporaryArray[0]
    }
}

export{
    TodoList
}